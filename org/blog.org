#+title: Blog

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: blog
:END:
** Hello World!
:PROPERTIES:
:EXPORT_DATE: <2021-01-22 Fri>
:EXPORT_FILE_NAME: hello-world
:END:
Lorem ipsum dolor sit amet :smile:.\\
This is my devblog, a small nook on the internet to share my experiences
and experiments.

#+hugo: more

I am using the all-powerful [[https://gohugo.io][Hugo]] with the
[[https://github.com/panr/hugo-theme-hello-friend][Hello Friend]] theme.
The site is stored on Github and hosted on Vercel. Hopefully, I'll
transition to my own design soon!

Currently I am fascinated by Emacs and keep discovering new things
almost daily, I will also catalogue my journey with Emacs here.

I frequently come across links to useful stuff & compulsively send them
to people. If you know me, you know what I'm talking about. I'll try
posting them here instead for future reference.\\
I'm already at my wit's end writing a Hello World post, how will I write
enough to sustain this blog :weary: Let's hope I do, I really like the
aesthetics of the current theme :D

I'm active on [[https://twitter.com/seshaljain/][Twitter]] these days,
come interact!

Until next time.

** Using Emacs for College Assignments :emacs:latex:
:PROPERTIES:
:EXPORT_DATE: <2021-01-23 Sat>
:EXPORT_DESCRIPTION: How I write my assignments for CS subjects at MANIT, Bhopal
:EXPORT_FILE_NAME: using-emacs-for-college-assignments
:END:
In the 3rd Semester of my Bachelor of Technology in Computer Science
course at MANIT, Bhopal, I came across
[[https://www.gnu.org/software/emacs/][Emacs]]. I won't be lying when I
say it changed my life.

I use Emacs for all my text-based work (more posts on this coming
soon!), and it naturally made sense for me to experiment with it for my
programming lab assignments.\\
The general workflow of the labs I am currently enrolled in is something
like this:

1. Professor assigns some task, ex. /Analysis of Various Sorting
   Algorithms/
2. The student writes relevant code/explanation for the given program
3. The student runs the program in a console, takes screenshots, and
   prepares a document in Word/Docs
4. The student mails a generated PDF (or even the original file) to the
   professor

I realised in the first few weeks that this is a very cumbersome
process, since we're dealing with images and syntax highlighting.\\
It does not make any sense to paste code from an IDE into a word
processor, where it loses the syntax highlighting or worse, is typeset
into an unreadable sans-serif typeface (Calibri, I'm looking at you)
:weary:.

I was exploring [[https://orgmode.org/][Org Mode]] around the same time,
and it is the perfect tool for this use case.\\
I now use literate programming to write and run source code in the same
file as my explanation, and it is then exported to LaTeX natively by Org
to general beautiful, publication-ready PDFs. Additionally, since all of
it is in plain text, I also host my assignments in version control on
[[https://github.com/seshaljain/semester-four/][Github]], where Org
files are rendered like regular pages. Awesome :fire:!

--------------

I have a fully custom Emacs config, you are welcome to check it out on
[[https://github.com/seshaljain/.doom.d][Github]]. However, you do not
need the entire configuration, the tools should work natively with Emacs
too!

*** Emacs Setup
On Ubuntu, installing Emacs is as simple as

#+BEGIN_EXAMPLE
  sudo apt install emacs
#+END_EXAMPLE

This should install Emacs 26.3 as of writing. Go on, launch your Emacs!

#+hugo: {{< figure src="/img/emacs.png" caption="Emacs 26.3 Fresh Install" >}}

*** TeX Setup
I use [[https://yihui.org/tinytex][TinyTeX]] because of its small
footprint, but essentially all you need is a TeX processor.\\
You can find the install instructions on its website:

#+BEGIN_EXAMPLE
  wget -qO- "https://yihui.org/tinytex/install-bin-unix.sh" | sh
#+END_EXAMPLE

This will install =tlmgr= and other TeX binaries on your system.\\
*Note:* You might need to log out and log in again for the binaries to
be accessible on your PATH.

*** Org
Org files are saved with a =.org= extension. Org is extremely powerful,
with robust support for text formatting and source code blocks. This is
extremely helpful, especially for us as you will see.

All Org mode headings start with *, with the number of * indicating the
depth.\\
You can add text as is, somewhat like Markdown. Check out all of Org
Mode's features in the [[https://orgmode.org/manual/][Org Mode Manual]].

Now here's the interesting part. You can write source code inline within
Org's source blocks, with complete support for syntax highlighting, code
building and auto-completion. :astonished:

For starters, you can use my
[[https://github.com/seshaljain/semester-four/blob/main/ada-lab/lab2/191112436.org][ADA
Lab 2 Assignment]] file.\\
After opening it in Emacs, you will see that the code blocks are already
being highlighted using C++ syntax. To edit the code, place the cursor
somewhere inside the code block and press C-c '.\\
This will launch a C++ buffer where you can edit the file with C++
language support. Press C-c ' to confirm the changes or C-c C-k to
cancel.

As you may have noticed by now, Emacs is very keyboard intensive, you
will learn the keybindings with practice over time.\\
You can also search for commands via M-x because almost everything in
Emacs is a (searchable) function.

Let's export this Org file now.\\
In the main Org file, enter C-c C-e to launch the Org Export window.
There are a myriad of options available, feel free to play around! I
especially like the UTF-8 export when submitting assignments in
plaintext. Adds additional flair to your work :wink:.

Oh! By the way, press C-g almost anywhere in Emacs to cancel the current
operation.

To export the file to PDF via TeX, enter C-c C-e l p. This creates a TeX
file from your Org file and uses LaTeX to convert it to a PDF.\\
...but wait! There seems to be an error! To open the error log, enter
C-x C-b and select the buffer named ** Org PDF LaTeX Output **.\\
You will find a line stating the name of the missing package:

=! LaTeX Error: File `<packagename>.sty' not found.=

This is because TinyTeX is very minimal, it comes only with the bare
minimum packages pre-installed. =tlmgr= allows you to install all the
TeX packages you need from the CTAN repository. When it shows an error,
run the following command to install the relevant package:

#+BEGIN_EXAMPLE
  tlmgr install <packagename>
#+END_EXAMPLE

Once you install all the missing packages, you should see a =.tex= and a
=.pdf= file on the same directory. Open up your very first Org-powered
PDF!\\
*Protip:* You can open PDFs in Emacs too! Simple use C-x C-f on a PDF
file.

#+hugo: {{< figure src="/img/pdf-plain.png" caption="PDF Reader in Emacs" >}}

This is pretty awesome, but you can do even better! =Minted= adds syntax
highlighting functionality to the =SRC= blocks on LaTeX export.

*** Minted
=Minted= is a LaTeX package which uses Python's
[[https://pygments.org/][Pygments]] library to generate syntax
highlighted code output. This is an external dependecy and also requires
some Emacs configuration.

Install =Pygments= via =pip=:

#+BEGIN_EXAMPLE
  pip install Pygments
#+END_EXAMPLE

*Note:* The =pygmentize= binary must be accessible on your PATH after
installation.

Install =minted= via =tlmgr=:

#+BEGIN_EXAMPLE
  tlmgr install minted
#+END_EXAMPLE

We have installed the external dependencies, now we need to configure
Emacs to use these.

Navigate to the ** scratch ** buffer. Switch to Org mode using M-x
org-mode [RET].

Create a Org source block by entering <s [TAB] and add =emacs-lisp= as
the language.

The block should now look like this:

#+BEGIN_SRC org
  #+BEGIN_SRC emacs-lisp

  #+END_SRC
#+END_SRC

In this source block, add the following code:

#+BEGIN_SRC emacs-lisp
  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

You can execute this code, /right here, in this file/ by using C-c C-c.
This will enable these features for your current session.

To make these changes permanent, open the =~/.emacs.d/init.el= file
(create one if it does not exist) and add the Lisp code there. =init.el=
is a special file which is launched at Emacs startup.

Congratulations, you now have a build process to generate beautiful
assignments via LaTeX!

#+hugo: {{< figure src="/img/pdf-color.png" caption="Syntax highlighted PDF" >}}
*** tl;dr
- Org Mode in Emacs supports LaTeX export natively, but requires the TeX
  binaries to be installed and accessible on PATH
- The =minted= package uses =Pygments= to add syntax highlighting to
  LaTeX exports
- Emacs can render PDFs natively

#+hugo: {{< endline >}}

** Org Custom LaTeX Classes :emacs:latex:org:
:PROPERTIES:
:EXPORT_DATE: <2021-01-30 Sat>
:EXPORT_DESCRIPTION: Defining a LaTeX class for assignments from within Emacs
:EXPORT_FILE_NAME: org-custom-latex-classes
:END:
In my [last post]({{< ref
"/blog/using-emacs-for-college-assignments.md" >}}), I described
my setup for writing assignments within Emacs.\\
I realised that while it works, I may need a more complicated workflow
to write reports and assignments which are more than just one-time
submissions.

Admittedly, I'm still a beginner at LaTeX, it is only through Org-mode's
mighty features that I am able to submit my assignments with ease.

Looking for options to customize the default =article= class, I came
across the =#+LATEX_CLASS= option in a post, /ofcourse/ Emacs has an
option😉. It has excellant documentation, but I could only find a few
dead-end answers online about my specific usecase.

Now coming to what I wanted to achieve,

#+BEGIN_QUOTE
  Create a report from previous assignments properly formatted with a
  Table of Contents and Title page
#+END_QUOTE

This is trivial with Google Docs or MS Word or even with a purely
LaTeX-based setup, and that's completely /fine/. But I would need to
write in Emacs and then copy it to either program, which is a hassle.\\
So here is what I did:\\
I searched Stack Overflow 😇.

Now that led to a dead answer, but the Org mailing list referenced there
had a few good tips. This is more of a LaTeX post than an Org one, but
oh well.

The default =article= class isn't exactly made up for writing reports,
and the =report= class has this concept of Chapters which did not make
sense in an assignment. But the sections-on-new-pages feature is what I
want, so I created a class derived from =report=, with a custom title
page and overridden =chaptername= macro.

Org has a variable called =org-latex-classes= which contains classes
available to the =#+LATEX_CLASS= option header. You can look it up (SPC
h v org-latex-classes in Doom Emacs), each entry is of the form

#+BEGIN_SRC emacs-lisp
  (class-name
   header-string
   (numbered-section . unnumbered-section)
   ...)
#+END_SRC

I created an =assignment= class. The header string is where the magic
happens.

#+BEGIN_SRC latex
  \documentclass[a4paper,12pt]{report}
  \renewcommand{\chaptername}{Lab}
  \makeatletter
  \renewcommand{\maketitle}{
    \begin{titlepage}
      \begin{center}
        \vspace*{2em}
        \Huge \textbf{ASSIGNMENT} \\
        \vspace{4em}
        \Huge \textbf{\@title} \\
        \vspace{4em}
        \Large \textbf{\@date} \\
        \bigskip
        \Large \textbf{\@author} \\
        \medskip
        \large 191112436, CSE-3 \\
        \bigskip
        \includegraphics[width=16em]{../../manit-logo.png} \\
        \bigskip
        \large Department of Computer Science \\
        \large MANIT, Bhopal \\
      \end{center}
    \end{titlepage}
  }
  \makeatother
#+END_SRC

Org needs =\= to be escaped, so in my =config.org=,

#+BEGIN_EXAMPLE
  (after! ox-latex
    (add-to-list 'org-latex-classes
                 '("assignment"
                   "\\documentclass[a4paper,12pt]{report}
  \\renewcommand{\\chaptername}{Lab}
  \\makeatletter
  \\renewcommand{\\maketitle}{
    \\begin{titlepage}
      \\begin{center}
        \\vspace*{2em}
        \\Huge \\textbf{ASSIGNMENT} \\\\
        \\vspace{4em}
        \\Huge \\textbf{\\@title} \\\\
        \\vspace{4em}
        \\Large \\textbf{\\@date} \\\\
        \\bigskip
        \\Large \\textbf{\\@author} \\\\
        \\medskip
        \\large 191112436, CSE-3 \\\\
        \\bigskip
        \\includegraphics[width=16em]{../../manit-logo.png} \\\\
        \\bigskip
        \\large Department of Computer Science \\\\
        \\large MANIT, Bhopal \\\\
      \\end{center}
    \\end{titlepage}
  }
  \\makeatother
  \\usepackage[margin=0.7in]{geometry}"
                   ("\\chapter{%s}" . "\\chapter*{%s}")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_EXAMPLE

*Note:* The =after!= part is just a Doom macro, you can also use
=with-eval-after-load= to achieve the same.

This creates a custom class for Org and LaTeX to use.

Whenever you need to write a report, simply call this class by adding

#+BEGIN_SRC org
  #+LATEX_CLASS: assignment
#+END_SRC

to the header of your Org file, for example

#+BEGIN_SRC org
  #+TITLE: Software Engineering Lab
  #+SUBTITLE: CSE-229
  #+AUTHOR: Seshal Jain
  #+DATE: January 29, 2021
  #+LATEX_CLASS: assignment
#+END_SRC

You can check out the entire Org file
[[https://github.com/seshaljain/semester-four/blob/main/se-lab/lab3/README.org][here]].

Now you only have to export this Org file. Run C-c C-e l p to generate a
PDF from your Org file 🎉

#+hugo: {{< figure src="/img/org-latex-output.png" caption="The generated PDF. Isn't it pretty?" >}}

#+hugo: {{< endline >}}

** Stream Youtube Playlists via VLC :scripting:
:PROPERTIES:
:EXPORT_DATE: <2021-02-24 Wed>
:EXPORT_FILE_NAME: stream-youtube-playlists-via-vlc
:END:
I came across
[[https://gist.github.com/p3g4asus/597050997e01f8fd1fcf473fe6545a4f][this]]
Lua script which parses Youtube playlist links and adds them to a VLC
playlist. It seems to work only on Windows though so I made a few tweaks
to make it run on Linux.

#+hugo: more

*** Some context
Youtube has loads of amazing channels for learning, and I like to
bingewatch tutorials and courses at ~3x speed.\\
I use uBlock Origin on Firefox, it efficiently eliminates the the
primary hurdle to bingewatching, ads.

However, learning from Youtube has a significant risk.\\
It is /distracting/.

I'll admit that damned sidebar of recommendations has lead me astray on
several occasions, I found myself looking at
[[https://www.youtube.com/watch?v=dQw4w9WgXcQ][questionable videos]] at
odd times instead of pending Watch Later videos I have piled up.

Sure, browser extensions exist for this purpose, but I wanted to play
with VLC addon scripts.\\
I'm very happy with the results 🤩

*** Script
{{< gist seshaljain 220d5f2db9c574f4b5d2ca80343963ca >}}

*** Installation
**** On Linux:
Save the script in =~/.local/share/vlc/lua/playlist/= along with
[[http://regex.info/code/JSON.lua][JSON.lua]] and the =youtube-dl=
[[https://youtube-dl.org/latest][binary]] for Linux.

The folder structure should look like this:

#+BEGIN_EXAMPLE
  ~/.local/share/vlc/lua/playlist
  ├── JSON.lua
  ├── youtube-dl
  └── yt-playlist.lua
#+END_EXAMPLE

**** On Windows:
Save
[[https://gist.github.com/p3g4asus/597050997e01f8fd1fcf473fe6545a4f][this]]
script in =%APPDATA%\vlc\lua\playlist\= along with
[[http://regex.info/code/JSON.lua][JSON.lua]] and the =youtube-dl=
[[https://youtube-dl.org/latest][binary]] for Windows.

The folder structure should look like this:

#+BEGIN_EXAMPLE
  C:\USERS\<username>\APPDATA\ROAMING\VLC
  └───lua
      └───playlist
          ├───JSON.lua
          ├───youtube-dl.exe
          └───yt-playlist.lua
#+END_EXAMPLE

*** Usage
After installation, relaunch VLC and open the =Open Media= > =Network=
menu (C-n), and enter the Youtube playlist URL.

It will be parsed automatically and added to the current playlist. You
can save the playlist as a =.xspf= file and share it as well!

** Youtube Remaining Time :js:scripting:
:PROPERTIES:
:EXPORT_DATE: <2021-04-24 Sat>
:EXPORT_DESCRIPTION: I wrote a bookmarklet which displays the time remaining in a Youtube playlist
:EXPORT_FILE_NAME: youtube-remaining-time
:END:
I spent most of the previous year's online class time on Netflix,
Youtube[fn:1], and other less honorable activities. After a year of
online classes, I have become accustomed to bingeing course playlists
from Youtube channels days before my exams, and it has worked out well
(so far).

I was going through a Theory of Computation playlist which had ~100
videos, and I just wanted to know how much time I would need to finish
the subject.

There are third-party tools that calculate the total time of a Youtube
playlist using the Youtube API, but that isn't what I needed. If I am on
the 62nd video of a course playlist and want an optimistic estimate of
the time it will take to finish my course, I wouldn't go to a different
website, would I?

So with ~24 hours remaining for my Endsem Exam, I sat and wrote a small
bookmarklet that runs on a Youtube playlist page and calculates the time
remaining in the playlist.

I needed to complete =10:40:45= hours[fn:2] of ToC.\\
I did not complete the playlist.\\
I spent about an hour inside the browser console and another hour
tweaking & refining the script, and then almost two hours fawning over
the script and sharing it with people.\\
All in all, 4 hours well spent. :innocent:

*** Installation
The installation is quite simple, you can try it out right away: <a
href="javascript:(function()%7BPL%3DArray.from(document.querySelectorAll(%22.playlist-items%20ytd-thumbnail-overlay-time-status-renderer%22))%3Bindex%3DparseInt(document.querySelector(%22.index-message%22).innerText.split(%22%2F%22))-1%3Bif(PL%26%26PL.length%3E0)%7BplTime%3D0%3Bfunction%20calcTime(pl)%7BpTime%3D0%3Bpl.forEach(item%3D%3E%7Bta%3Ditem.innerText.split(%22%3A%22)%3BitemTime%3D0%3Bsec%3D0%2Cmin%3D0%2Chr%3D0%3Bif(ta%26%26ta.length%3E0)%7Bsec%3DparseInt(ta.pop())%7Dif(ta%26%26ta.length%3E0)%7Bmin%3DparseInt(ta.pop())%7Dif(ta%26%26ta.length%3E0)%7Bhr%3DparseInt(ta.pop())%7DitemTime%3Dsec%2Bmin*60%2Bhr*60*60%3BpTime%2B%3DitemTime%7D)%3Breturn%20pTime%7Dfunction%20timeString(sec)%7Bhours%3DMath.floor(sec%2F3600)%3Bminutes%3DMath.floor((sec-hours*3600)%2F60)%3Bseconds%3DMath.floor(sec-hours*3600-minutes*60)%3Bif(hours%3C10)%7Bhours%3D%220%22%2Bhours%7Dif(minutes%3C10)%7Bminutes%3D%220%22%2Bminutes%7Dif(seconds%3C10)%7Bseconds%3D%220%22%2Bseconds%7Dreturn%60%24%7Bhours%7D%3A%24%7Bminutes%7D%3A%24%7Bseconds%7D%60%7Dalert(%60Playlist%20time%3A%20%24%7BtimeString(calcTime(PL))%7D%5Cn%5CnRemaining%20time%3A%20%24%7BtimeString(calcTime(PL.slice(index)))%7D%5CnAt%201.5x%3A%20%24%7BtimeString(calcTime(PL.slice(index))*2%2F3)%7D%5CnAt%202x%3A%20%24%7BtimeString(calcTime(PL.slice(index))%2F2)%7D%60)%7Delse%7Balert(%22Playlist%20not%20found%20on%20page%22)%7D%7D)()%3B">PlaylistTimer</a>
← drag this to your Bookmarks Bar, and click when on a Youtube playlist page.

*** Code
#+BEGIN_SRC js
  (function () {
    PL = Array.from(
      document.querySelectorAll(".playlist-items ytd-thumbnail-overlay-time-status-renderer"),
    );
    index = parseInt(document.querySelector(".index-message").innerText.split("/")) - 1;

    if (PL && PL.length > 0) {
      plTime = 0;

      function calcTime(pl) {
        pTime = 0;
        pl.forEach((item) => {
          ta = item.innerText.split(":");
          itemTime = 0;
          (sec = 0), (min = 0), (hr = 0);

          if (ta && ta.length > 0) {
            sec = parseInt(ta.pop());
          }

          if (ta && ta.length > 0) {
            min = parseInt(ta.pop());
          }

          if (ta && ta.length > 0) {
            hr = parseInt(ta.pop());
          }

          itemTime = sec + min * 60 + hr * 60 * 60;
          pTime += itemTime;
        });
        return pTime;
      }

      function timeString(sec) {
        hours = Math.floor(sec / 3600);
        minutes = Math.floor((sec - hours * 3600) / 60);
        seconds = Math.floor(sec - hours * 3600 - minutes * 60);

        if (hours < 10) {
          hours = "0" + hours;
        }

        if (minutes < 10) {
          minutes = "0" + minutes;
        }

        if (seconds < 10) {
          seconds = "0" + seconds;
        }

        return `${hours}:${minutes}:${seconds}`;
      }

      alert(
        `Playlist time: ${timeString(calcTime(PL))}\n\nRemaining time: ${timeString(
          calcTime(PL.slice(index)),
        )}\nAt 1.5x: ${timeString((calcTime(PL.slice(index)) * 2) / 3)}\nAt 2x: ${timeString(
          calcTime(PL.slice(index)) / 2,
        )}`,
      );
    } else {
      alert("Playlist not found on page");
    }
  })();
#+END_SRC

Fumbling around the page source I found the selector for playlist items.
A simple for loop through the timestamps and some parsing gives the
total time for the playlist.

The remaining time is calculated by extracting the index of the current
item from the item number indicator.

It is not quite production ready, but hey, it works!

#+hugo: {{< endline >}}

[fn:1] Looking up Emacs resources. Honest!

[fn:2] =05:20:22= hours at 2x speed
** SpOnGeBoB cAsE :js:scripting:
:PROPERTIES:
:EXPORT_DATE: <2021-05-22 Sat>
:EXPORT_FILE_NAME: spongebob-case
:EXPORT_DESCRIPTION: … when you need to mock people online in style
:END:
This one is going to be short.\\
Spongebob Case, according to
[[https://knowyourmeme.com/memes/mocking-spongebob][KnowYourMeme]],
consists of an alternation of uppercase and lowercase text, and
represents a mocking tone.

I used to do this manually, which was /excruciating/.

Turns out, it is quite simple with JS, and with some modern browser
APIs, totally accessible via a bookmarklet.

#+BEGIN_SRC js
  spongebobText = text
    .split("")
    .map((c) => (Math.random() < 0.5 ? c.toUpperCase() : c.toLowerCase()))
    .join("");
#+END_SRC

To add the clipboard functionality, we use
=navigator.clipboard.writeText=

#+BEGIN_SRC js
  if (navigator.clipboard) {
    let text = "";
    if (window.getSelection) {
      text = window.getSelection().toString();
    } else if (document.selection && document.selection.type != "Control") {
      text = document.selection.createRange().text;
    }

    spongebobText = text
      .split("")
      .map((c) => (Math.random() < 0.5 ? c.toUpperCase() : c.toLowerCase()))
      .join("");

    navigator.clipboard.writeText(spongebobText);
  }
#+END_SRC

Go ahead and install <a
href="javascript:if(navigator.clipboard)%7Bvar%20e%3D%22%22%3Bwindow.getSelection%3Fe%3Dwindow.getSelection().toString()%3Adocument.selection%26%26%22Control%22!%3Ddocument.selection.type%26%26(e%3Ddocument.selection.createRange().text)%3BspongebobText%3De.split(%22%22).map(function(a)%7Breturn.5%3EMath.random()%3Fa.toUpperCase()%3Aa.toLowerCase()%7D).join(%22%22)%3Bnavigator.clipboard.writeText(spongebobText)%7D%3Bvoid+
0">SpOnGeBoB cAsE</a> by dragging it to your bookmarks bar.

Select some text, and click the bookmarklet, and SPOngebOB cAse TexT
Will BE coPiED tO YOur CliPboArD 😎.

#+hugo: {{< endline >}}
** Git and Version Control :talk:git:
:PROPERTIES:
:EXPORT_DATE: <2022-09-22 Thu>
:EXPORT_FILE_NAME: git-and-version-control
:EXPORT_DESCRIPTION: a session on Git
:END:

tldr; find the slides [[https://seshaljain.github.io/git-and-version-control/][here]]

Today, I took a session on Git and Version Control for Vision, the technical society of Maulana Azad National Institute of Technology, Bhopal.

I wrote the slides back in [[https://github.com/Vision-NITB/git-and-version-control/commit/cf68d4727aabc3de6b37c75a46912e2afc2732c6][March 2021]], but never took the session because of online classes and Covid-19. Hackoverflow, our internal Hacktoberfest for the college community is right around the corner, so I decided to use these slides for a session on Git, Github & Open Source.

Initially I had planned on hosting the slides natively on the blog itself, but since it is an independent project it feels better to use Github Pages on a separate repository for hosting them.

I used Reveal.js with Org because it has cool effects, and Org allows for export to a variety of formats (LaTeX Beamer presentations too :smirk:)

#+hugo: {{< figure src="/img/gavc-1.jpg" >}}
#+hugo: {{< figure src="/img/gavc-2.jpg" caption="Didn't expect so many attendees, but it all worked out in the end" >}}

You can find the slides [[https://seshaljain.github.io/git-and-version-control/][here]].

#+hugo: {{< endline >}}
