#+title: DSA Mastersheet
#+bind: org-done-keywords ("TODO" "STRT" "DONE")
* Questions [0/413]
** DSA Mastersheet
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:
** TODO Reverse an array :array:
:PROPERTIES:
:EXPORT_FILE_NAME: reverse-an-array
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/write-a-program-to-reverse-an-array-or-string/
** TODO Find the maximum and minimum element in an array :array:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-maximum-and-minimum-element-in-an-array
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/maximum-and-minimum-in-an-array/
Divide and conquer
** TODO Find the Kth max and min element in an array :array:heap:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-kth-max-and-min-element-in-an-array
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/kth-smallest-element/0
1. Make priority queue of size =k=, insert first =k= elements from the array
2. For the remaining elements, pop and insert into pq if element is smaller than top
** TODO Sort an array of 0s, 1s and 2s :array:
:PROPERTIES:
:EXPORT_FILE_NAME: sort-an-array-of-0s-1s-and-2s
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/sort-an-array-of-0s-1s-and-2s/0
** TODO Move all the negative elements to one side of the array :array:
:PROPERTIES:
:EXPORT_FILE_NAME: move-all-the-negative-elements-to-one-side-of-the-array
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/move-negative-numbers-beginning-positive-end-constant-extra-space/
Cases:
1. negative negative: i++
2. positive positive: j--
3. negative positive: i++, j--
4. positive negative: swap, i++, j--
** TODO Find the union and intersection of the two sorted arrays :array:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-union-and-intersection-of-the-two-sorted-arrays
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/union-of-two-arrays/0
*** Union
Does not handle duplicates
Handles duplicates
*** Intersection
https://leetcode.com/problems/intersection-of-two-arrays/
** TODO Cyclically rotate an array by one :array:
:PROPERTIES:
:EXPORT_FILE_NAME: cyclically-rotate-an-array-by-one
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/cyclically-rotate-an-array-by-one/0
Also works for rotation by N elements
** TODO [#A] Minimise the maximum difference between heights :array:
:PROPERTIES:
:EXPORT_FILE_NAME: minimise-the-maximum-difference-between-heights
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/minimize-the-heights3351/1
** TODO Minimum number of jumps to reach end of an array :array:
:PROPERTIES:
:EXPORT_FILE_NAME: minimum-number-of-jumps-to-reach-end-of-an-array
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/minimum-number-of-jumps/0
** TODO Find the duplicate in an array of N+1 integers :array:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-duplicate-in-an-array-of-n-plus-1-integers
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/find-the-duplicate-number/
Floyd's tortoise & hare algorithm
** TODO [#A] Kadane's algorithm :array:dp:
:PROPERTIES:
:EXPORT_FILE_NAME: kadane-s-algorithm
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/kadanes-algorithm/0
DP without array
** TODO Merge intervals :array:
:PROPERTIES:
:EXPORT_FILE_NAME: merge-intervals
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/merge-intervals/
** TODO Next permutation :array:
:PROPERTIES:
:EXPORT_FILE_NAME: next-permutation
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/next-permutation/
1. Find non-increasing sequence from right
2. Find just greater number from right
3. Swap them
4. Reverse from =i= to end
** TODO Count inversion :array:search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: count-inversion
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/inversion-of-array/0
Identical to merge sort, just need to add the number of inversions when =arr[i]
> arr[j]= (adding =mid - i + 1= is enough, because after sorting all elements to
the right will automatically be inversion pairs)
** TODO [#A] Best time to buy and sell stock :array:
:PROPERTIES:
:EXPORT_FILE_NAME: best-time-to-buy-and-sell-stock
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
*** TODO Only 1 transaction is allowed
One pass, just need to check the lowest valley/highest peak (and their difference)
This problem reduces to maximum difference between two elements when larger
element must come after smaller element
*** TODO [#A] Maximum profit by buying and selling a share at most twice
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/
*** TODO Any number of transactions are allowed
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/
** TODO Find all pairs on integer array whose sum is equal to K :array:
:PROPERTIES:
:EXPORT_FILE_NAME: find-all-pairs-on-integer-array-whose-sum-is-equal-to-k
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/count-pairs-with-given-sum5022/1
** TODO Find common elements in 3 sorted arrays :array:
:PROPERTIES:
:EXPORT_FILE_NAME: find-common-elements-in-3-sorted-arrays
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/common-elements1132/1
** TODO Rearrange the array in alternating positive and negative items with O(1) extra space :array:
:PROPERTIES:
:EXPORT_FILE_NAME: rearrange-the-array-in-alternating-positive-and-negative-items-with-o--1--extra-space
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/rearrange-array-alternating-positive-negative-items-o1-extra-space/
** TODO Find if there is any subarray with sum equal to 0 :array:
:PROPERTIES:
:EXPORT_FILE_NAME: find-if-there-is-any-subarray-with-sum-equal-to-0
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/subarray-with-0-sum/0
** TODO Find factorial of a large number :array:
:PROPERTIES:
:EXPORT_FILE_NAME: find-factorial-of-a-large-number
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/factorials-of-large-numbers/0
** TODO Find maximum product subarray :array:
:PROPERTIES:
:EXPORT_FILE_NAME: find-maximum-product-subarray
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/maximum-product-subarray3604/1
** TODO Find longest consecutive subsequence :array:
:PROPERTIES:
:EXPORT_FILE_NAME: find-longest-consecutive-subsequence
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/longest-consecutive-sequence/submissions/
** TODO Given an array of size N and a number K, find all elements that appear more than N/K times :array:
:PROPERTIES:
:EXPORT_FILE_NAME: given-an-array-of-size-n-and-a-number-k-find-all-elements-that-appear-more-than-n-k-times
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/given-an-array-of-of-size-n-finds-all-the-elements-that-appear-more-than-nk-times/
GfG has a O(nk) time, O(k - 1) space solution, something about tetris
** TODO Find whether an array is a subset of another array :array:
:PROPERTIES:
:EXPORT_FILE_NAME: find-whether-an-array-is-a-subset-of-another-array
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/array-subset-of-another-array/0
Can also insert into set twice, and check if size is the same.
** TODO Find the triplet that sum to a given value :array:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-triplet-that-sum-to-a-given-value
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/triplet-sum-in-array/0
*** When =X = 0=
https://leetcode.com/problems/3sum/
2 pointer, avoid duplicates since =vector<vector<int>>= returned
** TODO Trapping rain water :array:
:PROPERTIES:
:EXPORT_FILE_NAME: trapping-rain-water
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/trapping-rain-water/0
Find lMax, rMax
ans += min(lMax, rMax) - currHeight
** TODO Chocolate distribution :array:greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: chocolate-distribution
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/chocolate-distribution-problem/0
Make window in sorted array, check for minimum
** TODO Smallest subarray with sum greater than a given value :array:
:PROPERTIES:
:EXPORT_FILE_NAME: smallest-subarray-with-sum-greater-than-a-given-value
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/smallest-subarray-with-sum-greater-than-x/0
** TODO Three way partitioning of an array around a given value :array:
:PROPERTIES:
:EXPORT_FILE_NAME: three-way-partitioning-of-an-array-around-a-given-value
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/three-way-partitioning/1
** TODO Minimum swaps required to bring elements <= K together :array:
:PROPERTIES:
:EXPORT_FILE_NAME: minimum-swaps-required-to-bring-elements-k-together
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/minimum-swaps-required-to-bring-all-elements-less-than-or-equal-to-k-together/0
** TODO Minimum number of merge operations required to make an array palindrome :array:
:PROPERTIES:
:EXPORT_FILE_NAME: minimum-number-of-operations-required-to-make-an-array-palindrome
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/find-minimum-number-of-merge-operations-to-make-an-array-palindrome/
** TODO Median of 2 sorted arrays of equal size :array:
:PROPERTIES:
:EXPORT_FILE_NAME: median-of-2-sorted-arrays-of-equal-size
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/find-the-median0527/1
** TODO Median of 2 sorted arrays of different size :array:
:PROPERTIES:
:EXPORT_FILE_NAME: median-of-2-sorted-arrays-of-different-size
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/median-of-two-sorted-arrays-of-different-sizes/
** TODO Spiral traversal on a matrix :matrix:
:PROPERTIES:
:EXPORT_FILE_NAME: spiral-traversal-on-a-matrix
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/spirally-traversing-a-matrix/0
** TODO Search an element in a matrix :matrix:
:PROPERTIES:
:EXPORT_FILE_NAME: search-an-element-in-a-matrix
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/search-a-2d-matrix/
Altered binary search
** TODO Find median in a row wise sorted matrix :matrix:
:PROPERTIES:
:EXPORT_FILE_NAME: find-median-in-a-row-wise-sorted-matrix
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/median-in-a-row-wise-sorted-matrix1527/1
** TODO Find row with maximum number of 1s :matrix:
:PROPERTIES:
:EXPORT_FILE_NAME: find-row-with-maximum-number-of-1s
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/row-with-max-1s0023/1
** TODO Print elements in sorted order using row-column wise sorted matrix :matrix:
:PROPERTIES:
:EXPORT_FILE_NAME: print-elements-in-sorted-order-using-row-column-wise-sorted-matrix
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/sorted-matrix/0
** TODO Maximum size rectangle :matrix:
:PROPERTIES:
:EXPORT_FILE_NAME: maximum-size-rectangle
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/max-rectangle/1
** TODO Find a specific pair in matrix :matrix:
:PROPERTIES:
:EXPORT_FILE_NAME: find-a-specific-pair-in-matrix
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/find-a-specific-pair-in-matrix/
** TODO Rotate matrix by 90 degrees :matrix:
:PROPERTIES:
:EXPORT_FILE_NAME: rotate-matrix-by-90-degrees
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/rotate-a-matrix-by-90-degree-in-clockwise-direction-without-using-any-extra-space/
** TODO Kth smallest element in a row-column wise sorted matrix :matrix:
:PROPERTIES:
:EXPORT_FILE_NAME: kth-smallest-element-in-a-row-column-wise-sorted-matrix
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/kth-element-in-matrix/1
** TODO Common elements in all rows of a given matrix :matrix:
:PROPERTIES:
:EXPORT_FILE_NAME: common-elements-in-all-rows-of-a-given-matrix
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/common-elements-in-all-rows-of-a-given-matrix/
** TODO Check whether a string is palindrome :string:
:PROPERTIES:
:EXPORT_FILE_NAME: check-whether-a-string-is-palindrome
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/palindrome-string0817/1
** TODO Find duplicate characters in a string :string:
:PROPERTIES:
:EXPORT_FILE_NAME: find-duplicate-characters-in-a-string
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/print-all-the-duplicates-in-the-input-string/
Set/map basic usecase
** TODO Why are strings immutable in Java? :string:
:PROPERTIES:
:EXPORT_FILE_NAME: why-are-strings-immutable-in-java
:EXPORT_HUGO_WEIGHT: auto
:END:
Java uses string literals mostly for memory security. Better alter copies of strings than alter main references in memory.
** TODO Check whether one string is a rotation of another :string:
:PROPERTIES:
:EXPORT_FILE_NAME: check-whether-one-string-is-a-rotation-of-another
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/a-program-to-check-if-strings-are-rotations-of-each-other/
** TODO Check whether a string is a valid shuffle of two strings :string:
:PROPERTIES:
:EXPORT_FILE_NAME: check-whether-a-string-is-a-valid-shuffle-of-two-strings
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.programiz.com/java-programming/examples/check-valid-shuffle-of-strings
** TODO Count and say :string:
:PROPERTIES:
:EXPORT_FILE_NAME: count-and-say
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/count-and-say/
** TODO Find the longest palindrome in a string :string:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-longest-palindrome-in-a-string
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/longest-palindromic-substring/
Expand from center, check for even and odd palindromes
** TODO Print all subsequences of a string :string:
:PROPERTIES:
:EXPORT_FILE_NAME: print-all-subsequences-of-a-string
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/print-subsequences-string/
** TODO Split the binary string into two substring with equal 0s and 1s :string:
:PROPERTIES:
:EXPORT_FILE_NAME: split-the-binary-string-into-two-substring-with-equal-0s-and-1s
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/split-the-binary-string-into-substrings-with-equal-number-of-0s-and-1s/
** TODO [#A] Word wrap :string:dp:
:PROPERTIES:
:EXPORT_FILE_NAME: word-wrap
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/word-wrap/0
** TODO [#A] Edit distance :string:dp:
:PROPERTIES:
:EXPORT_FILE_NAME: edit-distance
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/edit-distance/
#+begin_example
+---------+-----+
| replace | del |
+---------+-----+
| insert  | X   |
+---------+-----+
#+end_example
** TODO [#A] Find next greater number with same set of digits :string:
:PROPERTIES:
:EXPORT_FILE_NAME: find-next-greater-number-with-same-set-of-digits
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/next-permutation/0
** TODO [#A] Balanced parenthesis :string:st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: balanced-parenthesis
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/parenthesis-checker/0
** TODO [#A] Word break :string:trie:backtracking:dp:
:PROPERTIES:
:EXPORT_FILE_NAME: word-break
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/word-break/0
** TODO Rabin Karp algorithm :string:
:PROPERTIES:
:EXPORT_FILE_NAME: rabin-karp-algorithm
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/rabin-karp-algorithm-for-pattern-searching/
** TODO KMP algorithm :string:
:PROPERTIES:
:EXPORT_FILE_NAME: kmp-algorithm
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/
Finding longest longest prefix such that it is longest suffix
** TODO Bayer Moore algorithm :string:
:PROPERTIES:
:EXPORT_FILE_NAME: boyer-moore-algorithm-for-pattern-searching
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/boyer-moore-algorithm-for-pattern-searching/
** TODO Convert a sentence into its equivalent mobile numeric keypad sequence :string:
:PROPERTIES:
:EXPORT_FILE_NAME: convert-a-sentence-into-its-equivalent-mobile-numeric-keypad-sequence
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/convert-sentence-equivalent-mobile-numeric-keypad-sequence/
** TODO Minimum number of bracket reversals needed to make an expression balanced :string:
:PROPERTIES:
:EXPORT_FILE_NAME: minimum-number-of-bracket-reversals-needed-to-make-an-expression-balanced
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/count-the-reversals/0
}{{}}{{{
Remove all valid pairs, remaining string is like }}}...{{{...
ans = ceil(lBraces) + ceil(rBraces) in remaining string
** TODO Count all palindromic subsequence in a given string :string:dp:
:PROPERTIES:
:EXPORT_FILE_NAME: count-all-palindromic-subsequence-in-a-given-string
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/count-palindromic-subsequences/1
** TODO Count of number of given string in 2D character array :string:
:PROPERTIES:
:EXPORT_FILE_NAME: count-of-number-of-given-string-in-2d-character-array
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/find-count-number-given-string-present-2d-character-array/
** TODO Search a word in a 2D grid of characters :string:
:PROPERTIES:
:EXPORT_FILE_NAME: search-a-word-in-a-2d-grid-of-characters
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/find-the-string-in-grid/0
** TODO Converting roman numerals to decimal :string:
:PROPERTIES:
:EXPORT_FILE_NAME: converting-roman-numerals-to-decimal
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/roman-number-to-integer/0
** TODO Longest common prefix :string:
:PROPERTIES:
:EXPORT_FILE_NAME: longest-common-prefix
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/longest-common-prefix/
Divide and conquer, compare left and right subarrays.
** TODO Number of flips to make binary string alternate :string:
:PROPERTIES:
:EXPORT_FILE_NAME: number-of-flips-to-make-binary-string-alternate
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/min-number-of-flips/0
** TODO Find the second most repeated word in string :string:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-second-most-repeated-word-in-string
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/second-most-repeated-string-in-a-sequence/0
** TODO Minimum number of swaps for bracket balancing :string:
:PROPERTIES:
:EXPORT_FILE_NAME: minimum-number-of-swaps-for-bracket-balancing
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/minimum-swaps-for-bracket-balancing/0
** TODO Program to generate all possible valid IP addresses from given string :string:
:PROPERTIES:
:EXPORT_FILE_NAME: program-to-generate-all-possible-valid-ip-addresses-from-given-string
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/program-generate-possible-valid-ip-addresses-given-string/
** TODO Find the smallest window that contains all characters of string itself :string:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-smallest-window-that-contains-all-characters-of-string-itself
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/smallest-distant-window/0
** TODO Rearrange characters in a string such that no two adjacent are same :string:heap:greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: rearrange-characters-in-a-string-such-that-no-two-adjacent-are-same
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/rearrange-characters/0
** TODO Minimum characters to be added at front to make string palindrome :string:
:PROPERTIES:
:EXPORT_FILE_NAME: minimum-characters-to-be-added-at-front-to-make-string-palindrome
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/minimum-characters-added-front-make-string-palindrome/
** TODO Given a sequence of words, print all anagrams together :string:trie:greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: given-a-sequence-of-words-print-all-anagrams-together
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/k-anagrams-1/0
** TODO Find the smallest window in a string containing all characters of another string :string:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-smallest-window-in-a-string-containing-all-characters-of-another-string
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/smallest-window-in-a-string-containing-all-the-characters-of-another-string/0
** TODO Recursively remove all adjacent duplicates :string:
:PROPERTIES:
:EXPORT_FILE_NAME: recursively-remove-all-adjacent-duplicates
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/consecutive-elements/0
** TODO String matching where one string contains wildcard characters :string:
:PROPERTIES:
:EXPORT_FILE_NAME: string-matching-where-one-string-contains-wildcard-characters
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/wildcard-string-matching/0
** TODO Function to find number of customers who could not get a computer :string:
:PROPERTIES:
:EXPORT_FILE_NAME: function-to-find-number-of-customers-who-could-not-get-a-computer
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/function-to-find-number-of-customers-who-could-not-get-a-computer/
** TODO Transform one string to another using minimum number of given operation :string:
:PROPERTIES:
:EXPORT_FILE_NAME: transform-one-string-to-another-using-minimum-number-of-given-operation
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/transform-one-string-to-another-using-minimum-number-of-given-operation/
1. Check relative character frequencies & length of strings
2. Start from end, increase =res= till character found in B
Doing this because insertion is only allowed in front of A
** TODO Check if two given strings are isomorphic to each other :string:
:PROPERTIES:
:EXPORT_FILE_NAME: check-if-two-given-strings-are-isomorphic-to-each-other
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/isomorphic-strings/0
** TODO Recursively print all sentences that can be formed from list of word lists :string:
:PROPERTIES:
:EXPORT_FILE_NAME: recursively-print-all-sentences-that-can-be-formed-from-list-of-word-lists
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/recursively-print-all-sentences-that-can-be-formed-from-list-of-word-lists/
DFS on rows
** TODO Find first and last positions of an element in a sorted array :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: find-first-and-last-positions-of-an-element-in-a-sorted-array
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/first-and-last-occurrences-of-x/0
** TODO Find a fixed point (value equal to index) in a given array :search_sort:
https://practice.geeksforgeeks.org/problems/value-equal-to-index-value1330/1
Simple linear search
** TODO Search in a rotated sorted array :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: search-in-a-rotated-sorted-array
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/search-in-rotated-sorted-array/
** TODO Square root of an integer :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: square-root-of-an-integer
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/count-squares3649/1
** TODO Maximum and minimum of an array using minimum number of comparisons :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: maximum-and-minimum-of-an-array-using-minimum-number-of-comparisons
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/middle-of-three2926/1
** TODO Optimum location of point to minimize total distance :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: optimum-location-of-point-to-minimize-total-distance
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/optimum-location-point-minimize-total-distance/
** TODO Find missing and repeating :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: find-missing-and-repeating
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/find-missing-and-repeating2512/1
** TODO Find majority element :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: find-majority-element
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/majority-element/0
Moore's voting algorithm
** TODO Searching in an array where adjacent differ by at most K :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: searching-in-an-array-where-adjacent-differ-by-at-most-k
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/searching-array-adjacent-differ-k/
** TODO Find a pair with a given difference :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: find-a-pair-with-a-given-difference
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/find-pair-given-difference/0
** TODO Find four elements that sum to a given value :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: find-four-elements-that-sum-to-a-given-value
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/find-all-four-sum-numbers/0
** TODO Maximum sum such that no 2 elements are adjacent :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: maximum-sum-such-that-no-2-elements-are-adjacent
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/stickler-theif/0
** TODO Count triplet with sum smaller than a given value :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: count-triplet-with-sum-smaller-than-a-given-value
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/count-triplets-with-sum-smaller-than-x5549/1
** TODO Merge 2 sorted arrays :array:search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: merge-2-sorted-arrays
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/merge-two-sorted-arrays5135/1
** TODO Print all subarrays with 0 sum :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: print-all-subarrays-with-0-sum
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/zero-sum-subarrays/0
** TODO Product array puzzle :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: product-array-puzzle
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/product-array-puzzle/0
** TODO Sort array according to count of set bits :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: sort-array-according-to-count-of-set-bits
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/sort-by-set-bit-count/0
** TODO Minimum number of swaps required to sort the array :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: minimum-number-of-swaps-required-to-sort-the-array
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/minimum-swaps/1
** TODO Bishu and soldiers :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: bishu-and-soldiers
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.hackerearth.com/practice/algorithms/searching/binary-search/practice-problems/algorithm/bishu-and-soldiers/
** TODO Rasta and Kheshtak :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: rasta-and-kheshtak
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.hackerearth.com/practice/algorithms/searching/binary-search/practice-problems/algorithm/rasta-and-kheshtak/
** TODO Kth smallest number again :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: kth-smallest-number-again
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.hackerearth.com/practice/algorithms/searching/binary-search/practice-problems/algorithm/kth-smallest-number-again-2/
** TODO Find pivot element in a sorted array :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: find-pivot-element-in-a-sorted-array
:EXPORT_HUGO_WEIGHT: auto
:END:
http://theoryofprogramming.com/2017/12/16/find-pivot-element-sorted-rotated-array/
** TODO Kth element of two sorted arrays :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: kth-element-of-two-sorted-arrays
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/k-th-element-of-two-sorted-array/0
** TODO Aggressive cows :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: aggressive-cows
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.spoj.com/problems/AGGRCOW/
** TODO Book allocation aka Painter's Partition :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: book-allocation-aka-painter-s-partition
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/allocate-minimum-number-of-pages/0
** TODO Ekospoj :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: ekospoj
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.spoj.com/problems/EKO/
** TODO Job scheduling algorithm :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: job-scheduling-algorithm
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/weighted-job-scheduling-log-n-time/
** TODO Missing number in AP :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: missing-number-in-ap
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/arithmetic-number/0
** TODO Smallest number with atleast N trailing zeroes in factorial :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: smallest-number-with-atleast-n-trailing-zeroes-in-factorial
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/smallest-factorial-number5929/1
** TODO Roti Prata :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: roti-prata
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.spoj.com/problems/PRATA/
** TODO Doublehelix :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: doublehelix
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.spoj.com/problems/ANARC05B/
** TODO Subset sums :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: subset-sums
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.spoj.com/problems/SUBSUMS/
** TODO Implement merge-sort in-place :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-merge-sort-in-place
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/in-place-merge-sort/
** TODO Partitioning and sorting arrays with many repeated entries :search_sort:
:PROPERTIES:
:EXPORT_FILE_NAME: partitioning-and-sorting-arrays-with-many-repeated-entries
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.baeldung.com/java-sorting-arrays-with-repeated-entries
** TODO Reverse a linked list :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: reverse-a-linked-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/reverse-linked-list/

** TODO Reverse a linked list in group of given size :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: reverse-a-linked-list-in-group-of-given-size
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/reverse-a-linked-list-in-groups-of-given-size/1
** TODO Detect loop in a linked list :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: detect-loop-in-a-linked-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/detect-loop-in-linked-list/1
Floyd's tortoise and hare algorithm
** TODO Delete loop in a linked list :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: delete-loop-in-a-linked-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/remove-loop-in-linked-list/1
** TODO Find the starting point of the loop :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-starting-point-of-the-loop
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/linked-list-cycle-ii/
** TODO Remove duplicates in a sorted linked list :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: remove-duplicates-in-a-sorted-linked-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/remove-duplicates-from-sorted-list/
Check for last element having duplicate
** TODO Remove duplicates in a unsorted linked list :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: remove-duplicates-in-a-unsorted-linked-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/remove-duplicates-from-an-unsorted-linked-list/1
** TODO Move the last element to front in a linked list :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: move-the-last-element-to-front-in-a-linked-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/move-last-element-to-front-of-a-given-linked-list/
** TODO Add 1 to a number represented as a linked list :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: add-1-to-a-number-represented-as-a-linked-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/add-1-to-a-number-represented-as-linked-list/1
** TODO Add two numbers represented by linked lists :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: add-two-numbers-represented-by-linked-lists
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/add-two-numbers-represented-by-linked-lists/1
** TODO Intersection of two sorted linked list :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: intersection-of-two-sorted-linked-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/intersection-of-two-sorted-linked-lists/1
** TODO Intersection point of two linked lists :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: intersection-point-of-two-linked-lists
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/intersection-of-two-linked-lists/
** TODO [#A] Merge sort for linked lists :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: merge-sort-for-linked-lists
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/sort-a-linked-list/1
** TODO [#A] Quicksort for linked lists :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: quicksort-for-linked-lists
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/quick-sort-on-linked-list/1
** TODO Find the middle element of a linked list :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-middle-element-of-a-linked-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/middle-of-the-linked-list/
** TODO Check if a linked list is a circular linked list :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: check-if-a-linked-list-is-a-circular-linked-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/circular-linked-list/1
** TODO Split a circular linked list into two halves :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: split-a-circular-linked-list-into-two-halves
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/split-a-circular-linked-list-into-two-halves/1
** TODO Check whether the singly linked list is a palindrome :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: check-whether-the-singly-linked-list-is-a-palindrome
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/check-if-linked-list-is-pallindrome/1
Reverse second half of linked list, compare, then revert.
** TODO Deletion from a circular linked list :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: deletion-from-a-circular-linked-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/deletion-circular-linked-list/
** TODO Reverse a doubly linked list :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: reverse-a-doubly-linked-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/reverse-a-doubly-linked-list/1
** TODO Find pairs with a given sum in a DLL :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: find-pairs-with-a-given-sum-in-a-dll
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/find-pairs-given-sum-doubly-linked-list/
** TODO Count triplets in a sorted DLL whose sum is equal to given value X :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: count-triplets-in-a-sorted-dll-whose-sum-is-equal-to-given-value-x
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/count-triplets-sorted-doubly-linked-list-whose-sum-equal-given-value-x/
** TODO [#A] Sort a K sorted doubly linked list :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: sort-a-k-sorted-doubly-linked-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/sort-k-sorted-doubly-linked-list/
** TODO Rotate DLL by N nodes :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: rotate-dll-by-n-nodes
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/rotate-doubly-linked-list-n-nodes/
** TODO [#A] Rotate a doubly linked list in group of given size :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: rotate-a-doubly-linked-list-in-group-of-given-size
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/reverse-doubly-linked-list-groups-given-size/
** TODO Can we reverse a linked list in less than O(n)? :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: can-we-reverse-a-linked-list-in-less-than-o--n
:EXPORT_HUGO_WEIGHT: auto
:END:
No for SLL, yes for DLL.
** TODO Why is quicksort preferred for arrays while merge sort for linked lists? :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: why-is-quicksort-preferred-for-arrays-while-merge-sort-for-linked-lists
:EXPORT_HUGO_WEIGHT: auto
:END:
Quicksort is also one of the efficient algorithms with the average time complexity of O(nlogn). But the worst-case time complexity is O(n^2). Also, variations of the quick sort like randomized quicksort are not efficient for the linked list because unlike arrays, random access in the linked list is not possible in O(1) time. If we sort the linked list using quicksort, we would end up using the head as a pivot element which may not be efficient in all scenarios.
** TODO Flatten a linked list :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: flatten-a-linked-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/flattening-a-linked-list/1
** TODO Sort a ll of 0s, 1s and 2s :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: sort-a-ll-of-0s-1s-and-2s
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/given-a-linked-list-of-0s-1s-and-2s-sort-it/1
** TODO Clone a linked list with next and random pointer :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: clone-a-linked-list-with-next-and-random-pointer
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/copy-list-with-random-pointer/
Inefficient
Optimised
** TODO Multiply 2 numbers represented by ll :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: multiply-2-numbers-represented-by-ll
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/multiply-two-linked-lists/1
** TODO Delete nodes which have a greater value on right side :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: delete-nodes-which-have-a-greater-value-on-right-side
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/delete-nodes-having-greater-value-on-right/1
** TODO Segregate even and odd nodes in a linked list :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: segregate-even-and-odd-nodes-in-a-linked-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/segregate-even-and-odd-nodes-in-a-linked-list/0
** TODO Program for Nth node from the end of a linked list :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: program-for-nth-node-from-the-end-of-a-linked-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/nth-node-from-end-of-linked-list/1
** TODO Find the first non-repeating character from a stream of characters :ll:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-first-non-repeating-character-from-a-stream-of-characters
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/first-non-repeating-character-in-a-stream/0
** TODO Level order traversal :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: level-order-traversal
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/level-order-traversal/1
BFS
** TODO Reverse level order traversal :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: reverse-level-order-traversal
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/reverse-level-order-traversal/1
** TODO Height of a tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: height-of-a-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/height-of-binary-tree/1
** TODO Diameter of a tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: diameter-of-a-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/diameter-of-binary-tree/
Leetcode expects diamater of tree to be number of edges, ∴ return =res - 1=
** TODO Mirror of a tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: mirror-of-a-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/invert-binary-tree/
** TODO Inorder traversal of a tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: inorder-traversal-of-a-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.techiedelight.com/inorder-tree-traversal-iterative-recursive/
Left, Root, Right
Recursive
Iterative: use stack
** TODO Preorder traversal of a tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: preorder-traversal-of-a-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.techiedelight.com/preorder-tree-traversal-iterative-recursive/
Root, Left, Right
Recursive
Iterative: use stack
** TODO Postorder traversal of a tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: postorder-traversal-of-a-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.techiedelight.com/postorder-tree-traversal-iterative-recursive/
Left, Right, Root
Recursive
Iterative: use stack
** TODO Right view of a tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: right-view-of-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/binary-tree-right-side-view/
** TODO Left view of a tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: left-view-of-a-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/left-view-of-binary-tree/1
** TODO Top view of a tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: top-view-of-a-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/top-view-of-binary-tree/1
** TODO Bottom view of a tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: bottom-view-of-a-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/bottom-view-of-binary-tree/1
** TODO Zig-zag traversal of a binary tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: zig-zag-traversal-of-a-binary-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/zigzag-tree-traversal/1
** TODO Check if a tree is balanced :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: check-if-a-tree-is-balanced
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/check-for-balanced-tree/1
** TODO Diagonal traversal of a binary tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: diagonal-traversal-of-a-binary-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/diagonal-traversal-of-binary-tree/
** TODO Boundary traversal of a binary tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: boundary-traversal-of-a-binary-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/boundary-traversal-of-binary-tree/1
** TODO Construct binary tree from string with bracket representation :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: construct-binary-tree-from-string-with-bracket-representation
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/construct-binary-tree-string-bracket-representation/
** TODO Convert binary tree into doubly linked list :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: convert-binary-tree-into-doubly-linked-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/binary-tree-to-dll/1
** TODO Convert binary tree into sum tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: convert-binary-tree-into-sum-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/transform-to-sum-tree/1
** TODO Construct binary tree from inorder and preorder traversal :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: construct-binary-tree-from-inorder-and-preorder-traversal
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/construct-tree-1/1
** TODO Find minimum swaps required to convert a binary tree into BST :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: find-minimum-swaps-required-to-convert-a-binary-tree-into-bst
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/minimum-swap-required-convert-binary-tree-binary-search-tree/
** TODO Check if binary tree is sum tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: check-if-binary-tree-is-sum-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/sum-tree/1
** TODO Check if all leaf nodes are at same level :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: check-if-all-leaf-nodes-are-at-same-level
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/leaf-at-same-level/1
** TODO [#A] Check if a binary tree contains duplicate subtrees of size 2 or more :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: check-if-a-binary-tree-contains-duplicate-subtrees-of-size-2-or-more
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/duplicate-subtree-in-binary-tree/1
** TODO Check if 2 trees are mirror :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: check-if-2-trees-are-mirror
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/check-mirror-in-n-ary-tree/0
** TODO Sum of nodes on the longest path from root to leaf node :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: sum-of-nodes-on-the-longest-path-from-root-to-leaf-node
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/sum-of-the-longest-bloodline-of-a-tree/1
** TODO [#A] Check if given graph is tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: check-if-given-graph-is-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/check-given-graph-tree/
** TODO Find largest subtree sum in a tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: find-largest-subtree-sum-in-a-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/find-largest-subtree-sum-tree/
** TODO Maximum sum of nodes in binary tree such that no two are adjacent :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: maximum-sum-of-nodes-in-binary-tree-such-that-no-two-are-adjacent
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/maximum-sum-nodes-binary-tree-no-two-adjacent/
** TODO Print all K sum paths in a binary tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: print-all-k-sum-paths-in-a-binary-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/print-k-sum-paths-binary-tree/
** TODO Find LCA in a binary tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: find-lca-in-a-binary-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/
** TODO Find distance between 2 nodes in a binary tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: find-distance-between-2-nodes-in-a-binary-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/min-distance-between-two-given-nodes-of-a-binary-tree/1
** TODO Kth ancestor of node in a binary tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: kth-ancestor-of-node-in-a-binary-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/kth-ancestor-node-binary-tree-set-2/
** TODO [#A] Find all duplicate subtrees in a binary tree :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: find-all-duplicate-subtrees-in-a-binary-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/duplicate-subtrees/1
** TODO Tree isomorphism :bt:
:PROPERTIES:
:EXPORT_FILE_NAME: tree-isomorphism
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/check-if-tree-is-isomorphic/1
** TODO Find a value in a BST :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: find-a-value-in-a-bst
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/search-in-a-binary-search-tree/
** TODO Find min and max value in a BST :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: find-min-and-max-value-in-a-bst
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/minimum-element-in-bst/1
** TODO Find inorder successor and inorder predecessor in a BST :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: find-inorder-successor-and-inorder-predecessor-in-a-bst
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/predecessor-and-successor/1
** TODO Deletion of a node in a BST :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: deletion-of-a-node-in-a-bst
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/delete-node-in-a-bst/
** TODO Check if a tree is a BST :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: check-if-a-tree-is-a-bst
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/validate-binary-search-tree/
** TODO Populate inorder successor of all nodes :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: populate-inorder-successor-of-all-nodes
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/populate-inorder-successor-for-all-nodes/1
** TODO Find LCA in a BST :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: find-lca-of-2-nodes-in-a-bst
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/lowest-common-ancestor-in-a-bst/1
** TODO Construct BST from preorder traversal :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: construct-bst-from-preorder-traversal
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/construct-bst-from-given-preorder-traversa/
** TODO Convert binary tree into BST :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: convert-binary-tree-into-bst
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/binary-tree-to-bst/1
** TODO Convert a normal BST into a balanced BST :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: convert-a-normal-bst-into-a-balanced-bst
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/convert-normal-bst-balanced-bst/
** TODO [#A] Merge two BST :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: merge-two-bst
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/merge-two-balanced-binary-search-trees/
** TODO Find Kth largest element in a BST :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: find-kth-largest-element-in-a-bst
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/kth-largest-element-in-bst/1
** TODO Find Kth smallest element in a BST :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: find-kth-smallest-element-in-a-bst
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/find-k-th-smallest-element-in-bst/1
** TODO Count pairs from 2 BST whose sum is equal to given value X :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: count-pairs-from-2-bst-whose-sum-is-equal-to-given-value-x
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/brothers-from-different-root/1
** TODO Find the median of BST in O(n) time and O(1) space :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-median-of-bst-in-o--n--time-and-o--1--space
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/find-median-bst-time-O(1)-space/
** TODO Count BST nodes that lie in a given range :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: count-bst-nodes-that-lie-in-a-given-range
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/count-bst-nodes-that-lie-in-a-given-range/1
** TODO Replace every element with the least greater element on its right :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: replace-every-element-with-the-least-greater-element-on-its-right
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/replace-every-element-with-the-least-greater-element-on-its-right/
** TODO Given N appointments, find the conflicting appointments :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: given-n-appointments-find-the-conflicting-appointments
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/given-n-appointments-find-conflicting-appointments/
** TODO Check preorder is valid :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: check-preorder-is-valid
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/preorder-to-postorder/0
** TODO Check whether BST contains dead end :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: check-whether-bst-contains-dead-end
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/check-whether-bst-contains-dead-end/1
** TODO [#A] Largest BST in a binary tree :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: largest-bst-in-a-binary-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/largest-bst/1
** TODO Flatten BST to sorted list :bst:
:PROPERTIES:
:EXPORT_FILE_NAME: flatten-bst-to-sorted-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/flatten-bst-to-sorted-list-increasing-order/
** TODO Activity selection :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: activity-selection
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/n-meetings-in-one-room/0
** TODO Job sequencing :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: job-sequencing
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/job-sequencing-problem/0
** TODO Huffman coding :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: huffman-coding
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/huffman-encoding/0
** TODO Water connection :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: water-connection
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/water-connection-problem/0
** TODO Fractional knapsack :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: fractional-knapsack
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/fractional-knapsack/0
** TODO Find minimum number of coins :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: find-minimum-number-of-coins
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/coin-piles/0
** TODO Maximum trains for which stoppage can be provided :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: maximum-trains-for-which-stoppage-can-be-provided
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/maximum-trains-stoppage-can-provided/
** TODO Minimum platforms :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: minimum-platforms
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/minimum-platforms/0
** TODO Buy maximum stocks if I stocks can be bought on Ith day :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: buy-maximum-stocks-if-i-stocks-can-be-bought-on-ith-day
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/buy-maximum-stocks-stocks-can-bought-th-day/
** TODO Find the minimum and maximum amount to buy all N candies :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-minimum-and-maximum-amount-to-buy-all-n-candies
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/shop-in-candy-store/0
** TODO Minimum cost to cut a board into squares :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: minimum-cost-to-cut-a-board-into-squares
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/minimum-cost-cut-board-squares/
** TODO Check if it is possible to survive on island :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: check-if-it-is-possible-to-survive-on-island
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/survival/
** TODO Find maximum meetings in one room :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: find-maximum-meetings-in-one-room
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/find-maximum-meetings-in-one-room/
** TODO Maximum product subset of an array :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: maximum-product-subset-of-an-array
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/maximum-product-subset-array/
** TODO Maximize array sum after K negations :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: maximize-array-sum-after-k-negations
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/maximize-sum-after-k-negations/0
** TODO Maximize the sum of arr[i]*i :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: maximize-the-sum-of-arr-i-i
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/maximize-arrii-of-an-array/0
** TODO Maximum sum of absolute difference of an array :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: maximum-sum-of-absolute-difference-of-an-array
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/maximum-sum-absolute-difference-array/
** TODO Maximize sum of consecutive differences in a circular array :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: maximize-sum-of-consecutive-differences-in-a-circular-array
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/swap-and-maximize/0
** TODO Minimum sum of absolute difference of pairs of two arrays :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: minimum-sum-of-absolute-difference-of-pairs-of-two-arrays
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/minimum-sum-absolute-difference-pairs-two-arrays/
** TODO Shortest Job First (SJF) CPU scheduling :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: shortest-job-first--sjf--cpu-scheduling
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/program-for-shortest-job-first-or-sjf-cpu-scheduling-set-1-non-preemptive/
** TODO Least Recently Used (LRU) page replacement algorithm :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: least-recently-used--lru--page-replacement-algorithm
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/page-faults-in-lru/0
** TODO Smallest subset with sum greater than all other elements :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: smallest-subset-with-sum-greater-than-all-other-elements
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/smallest-subset-sum-greater-elements/
** TODO Defense of a kingdom :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: defense-of-a-kingdom
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.spoj.com/problems/DEFKIN/
** TODO Die hard :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: die-hard
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.spoj.com/problems/DIEHARD/
** TODO Wine trading in Gergovia :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: wine-trading-in-gergovia
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.spoj.com/problems/GERGOVIA/
** TODO Picking up chicks :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: picking-up-chicks
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.spoj.com/problems/GCJ101BB/
** TODO Chocolate :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: chocolate
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.spoj.com/problems/CHOCOLA/
** TODO Arranging amplifiers :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: arranging-amplifiers
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.spoj.com/problems/ARRANGE/
** TODO K centers :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: k-centers
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/k-centers-problem-set-1-greedy-approximate-algorithm/
** TODO Find smallest number with given number of digits and sum of digits :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: find-smallest-number-with-given-number-of-digits-and-sum-of-digits
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/smallest-number5829/1
** TODO Find maximum sum possible equal sum of three stacks :greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: find-maximum-sum-possible-equal-sum-of-three-stacks
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/find-maximum-sum-possible-equal-sum-three-stacks/
** TODO Rat in a maze :graph:backtracking:
:PROPERTIES:
:EXPORT_FILE_NAME: rat-in-a-maze
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1
** TODO Printing all solutions to N-queens :backtracking:
:PROPERTIES:
:EXPORT_FILE_NAME: printing-all-solutions-to-n-queens
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/printing-solutions-n-queen-problem/
** TODO Remove invalid parentheses :backtracking:
:PROPERTIES:
:EXPORT_FILE_NAME: remove-invalid-parentheses
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/remove-invalid-parentheses/
** TODO Sudoku solver :backtracking:
:PROPERTIES:
:EXPORT_FILE_NAME: sudoku-solver
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/solve-the-sudoku/0
** TODO M coloring :graph:backtracking:
:PROPERTIES:
:EXPORT_FILE_NAME: m-coloring
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/m-coloring-problem/0
** TODO Print all palindromic partitions of a string :backtracking:
:PROPERTIES:
:EXPORT_FILE_NAME: print-all-palindromic-partitions-of-a-string
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/given-a-string-print-all-possible-palindromic-partition/
** TODO Knight's tour :backtracking:
:PROPERTIES:
:EXPORT_FILE_NAME: knight-s-tour
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/the-knights-tour-problem-backtracking-1/
** TODO Tug of war :backtracking:
:PROPERTIES:
:EXPORT_FILE_NAME: tug-of-war
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/tug-of-war/
** TODO Find shortest safe route in a path with landmines :backtracking:
:PROPERTIES:
:EXPORT_FILE_NAME: find-shortest-safe-route-in-a-path-with-landmines
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/find-shortest-safe-route-in-a-path-with-landmines/
** TODO Combination sum :backtracking:
:PROPERTIES:
:EXPORT_FILE_NAME: combination-sum
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/combination-sum/0
** TODO Find maximum number possible by doing atmost K swaps :backtracking:
:PROPERTIES:
:EXPORT_FILE_NAME: find-maximum-number-possible-by-doing-atmost-k-swaps
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/largest-number-in-k-swaps/0
** TODO Print all permutations of a string :string:backtracking:
:PROPERTIES:
:EXPORT_FILE_NAME: print-all-permutations-of-a-string
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/permutations-of-a-given-string/0
** TODO Longest possible route in a matrix with hurdles :backtracking:
:PROPERTIES:
:EXPORT_FILE_NAME: longest-possible-route-in-a-matrix-with-hurdles
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/longest-possible-route-in-a-matrix-with-hurdles/
** TODO Print all possible paths from top left to bottom right of a MxN matrix :backtracking:
:PROPERTIES:
:EXPORT_FILE_NAME: print-all-possible-paths-from-top-left-to-bottom-right-of-a-mxn-matrix
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/print-all-possible-paths-from-top-left-to-bottom-right-of-a-mxn-matrix/
** TODO Partition a set into K subsets with equal sum :backtracking:
:PROPERTIES:
:EXPORT_FILE_NAME: partition-a-set-into-k-subsets-with-equal-sum
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/partition-array-to-k-subsets/1
** TODO Find the Kth permutation sequence of first N natural numbers :backtracking:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-kth-permutation-sequence-of-first-n-natural-numbers
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/find-the-k-th-permutation-sequence-of-first-n-natural-numbers/
** TODO Implement stack from scratch :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-stack-from-scratch
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.tutorialspoint.com/javaexamples/data_stack.htm
** TODO Implement queue from scratch :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-queue-from-scratch
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/queue-set-1introduction-and-array-implementation/
** TODO Implement 2 stack in an array :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-2-stack-in-an-array
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/implement-two-stacks-in-an-array/1
** TODO Find the middle element of a stack :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-middle-element-of-a-stack
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/design-a-stack-with-find-middle-operation/
** TODO Implement N stacks in an array :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-n-stacks-in-an-array
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/efficiently-implement-k-stacks-single-array/
** TODO Reverse a string using stack :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: reverse-a-string-using-stack
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/reverse-a-string-using-stack/1
** TODO Design a stack that supports getmin() in O(1) time and O(1) extra space :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: design-a-stack-that-supports-getmin-in-o--1--time-and-o--1--extra-space
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/special-stack/1
** TODO Find the next greater element :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-next-greater-element
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/next-larger-element/0
** TODO Celebrity :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: celebrity
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/the-celebrity-problem/1
** TODO Arithmetic expression evaluation :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: arithmetic-expression-evaluation
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/arithmetic-expression-evalution/
** TODO Evaluation of postfix expression :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: evaluation-of-postfix-expression
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/evaluation-of-postfix-expression/0
** TODO Implement a method to insert an element at its bottom without using any other data structure :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-a-method-to-insert-an-element-at-its-bottom-without-using-any-other-data-structure
:EXPORT_HUGO_WEIGHT: auto
:END:
https://stackoverflow.com/questions/45130465/inserting-at-the-end-of-stack
** TODO Reverse a stack using recursion :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: reverse-a-stack-using-recursion
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/reverse-a-stack-using-recursion/
** TODO Sort a stack using recursion :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: sort-a-stack-using-recursion
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/sort-a-stack/1
** TODO Merge overlapping intervals :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: merge-overlapping-intervals
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/overlapping-intervals/0
** TODO Largest rectangular area in histogram :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: largest-rectangular-area-in-histogram
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/maximum-rectangular-area-in-a-histogram/0
** TODO Length of the longest valid substring :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: length-of-the-longest-valid-substring
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/valid-substring0624/1
** TODO Expression contains redundant bracket :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: expression-contains-redundant-bracket
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/expression-contains-redundant-bracket-not/
** TODO Implement stack using queue :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-stack-using-queue
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/stack-using-two-queues/1
** TODO Implement stack using deque :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-stack-using-deque
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/implement-stack-queue-using-deque/
** TODO Stack permutations :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: stack-permutations
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/stack-permutations-check-if-an-array-is-stack-permutation-of-other/
** TODO Implement queue using stack :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-queue-using-stack
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/queue-using-two-stacks/1
** TODO Implement N queue in an array :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-n-queue-in-an-array
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/efficiently-implement-k-queues-single-array/
** TODO Implement a circular queue :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-a-circular-queue
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/circular-queue-set-1-introduction-array-implementation/
** TODO LRU cache implementation :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: lru-cache-implementation
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/lru-cache/1
** TODO Reverse a queue using recursion :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: reverse-a-queue-using-recursion
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/queue-reversal/1
** TODO Reverse the first K elements of a queue :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: reverse-the-first-k-elements-of-a-queue
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/reverse-first-k-elements-of-queue/1
** TODO Interleave the first half of the queue with second half :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: interleave-the-first-half-of-the-queue-with-second-half
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/interleave-first-half-queue-second-half/
** TODO Find the first circular tour that visits all petrol pumps :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-first-circular-tour-that-visits-all-petrol-pumps
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/circular-tour/1
** TODO Minimum time required to rot all oranges :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: minimum-time-required-to-rot-all-oranges
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/rotten-oranges/0
** TODO Distance of nearest cell having 1 in a binary matrix :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: distance-of-nearest-cell-having-1-in-a-binary-matrix
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/distance-of-nearest-cell-having-1/0
** TODO First negative integer in every window of size K :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: first-negative-integer-in-every-window-of-size-k
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/first-negative-integer-in-every-window-of-size-k/0
** TODO Check if all levels of two trees are anagrams :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: check-if-all-levels-of-two-trees-are-anagrams
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/check-if-all-levels-of-two-trees-are-anagrams-or-not/
** TODO Sum of minimum and maximum elements of all subarrays of size K :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: sum-of-minimum-and-maximum-elements-of-all-subarrays-of-size-k
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/sum-minimum-maximum-elements-subarrays-size-k/
** TODO Minimum sum of squares of character counts in a given string after removing K characters :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: minimum-sum-of-squares-of-character-counts-in-a-given-string-after-removing-k-characters
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/game-with-string/0
** TODO Next smaller element :st_q:
:PROPERTIES:
:EXPORT_FILE_NAME: next-smaller-element
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/next-smaller-element/
** TODO Implement a maxheap/minheap :heap:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-a-maxheap-minheap
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/building-heap-from-array/
** TODO Heap sort :heap:
:PROPERTIES:
:EXPORT_FILE_NAME: heap-sort
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/heap-sort/
** TODO Maximum of all subarrays of size K :heap:
:PROPERTIES:
:EXPORT_FILE_NAME: maximum-of-all-subarrays-of-size-k
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/sliding-window-maximum-maximum-of-all-subarrays-of-size-k/
** TODO Kth largest element in an array :heap:
:PROPERTIES:
:EXPORT_FILE_NAME: kth-largest-element-in-an-array
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/k-largest-elements4206/1
Make heap of size =k=, then insert remaining only if greater
Minheap for k largest, maxheap for k smallest
** TODO [#A] Merge K sorted arrays :heap:
:PROPERTIES:
:EXPORT_FILE_NAME: merge-k-sorted-arrays
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/merge-k-sorted-arrays/1
** TODO Merge 2 binary max heaps :heap:
:PROPERTIES:
:EXPORT_FILE_NAME: merge-2-binary-max-heaps
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/merge-two-binary-max-heap/0
** TODO Kth largest sum continuous subarrays :heap:
:PROPERTIES:
:EXPORT_FILE_NAME: kth-largest-sum-continuous-subarrays
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/
** TODO Reorganize strings :heap:
:PROPERTIES:
:EXPORT_FILE_NAME: reorganize-strings
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/reorganize-string/
** TODO [#A] Merge K sorted linked lists :ll:heap:
:PROPERTIES:
:EXPORT_FILE_NAME: merge-k-sorted-linked-lists
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/merge-k-sorted-linked-lists/1
** TODO Smallest range in K lists :heap:
:PROPERTIES:
:EXPORT_FILE_NAME: smallest-range-in-k-lists
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/find-smallest-range-containing-elements-from-k-lists/1
** TODO Median in a stream of integers :heap:
:PROPERTIES:
:EXPORT_FILE_NAME: median-in-a-stream-of-integers
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/find-median-in-a-stream/0
** TODO Check if a binary tree is heap :heap:
:PROPERTIES:
:EXPORT_FILE_NAME: check-if-a-binary-tree-is-heap
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/is-binary-tree-heap/1
** TODO Connect N ropes with minimum cost :heap:greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: connect-n-ropes-with-minimum-cost
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/minimum-cost-of-ropes/0
** TODO Convert BST to min heap :heap:
:PROPERTIES:
:EXPORT_FILE_NAME: convert-bst-to-min-heap
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/convert-bst-min-heap/
** TODO Convert min heap to max heap :heap:
:PROPERTIES:
:EXPORT_FILE_NAME: convert-min-heap-to-max-heap
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/convert-min-heap-to-max-heap/
** TODO Minimum sum of two numbers formed from digits of an array :heap:
:PROPERTIES:
:EXPORT_FILE_NAME: minimum-sum-of-two-numbers-formed-from-digits-of-an-array
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/minimum-sum4058/1
** TODO Create and print a graph :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: create-and-print-a-graph
:EXPORT_HUGO_WEIGHT: auto
:END:
https://1drv.ms/t/s!AqTOHFO77CqEiRua06v1PATyiFg5
** TODO Implement BFS :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-bfs
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/bfs-traversal-of-graph/1
GfG has incorrect testcases. Always check for multiple components, which
requires the commented outer =visited= loop.
** TODO Implement DFS :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-dfs
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/depth-first-traversal-for-a-graph/1
*** Recursive
*** Iterative
** TODO Detect cycle in directed graph using BFS/DFS :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: detect-cycle-in-directed-graph-using-bfs-dfs
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/detect-cycle-in-a-graph/
*** Using DFS
*** Using BFS
** TODO Detect cycle in undirected graph using BFS/DFS :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: detect-cycle-in-undirected-graph-using-bfs-dfs
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1
*** DFS
*** BFS
** TODO Minimum steps by knight :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: minimum-steps-by-knight
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/steps-by-knight/0
** TODO Flood fill algorithm :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: flood-fill-algorithm
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/flood-fill/
** TODO Clone a graph :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: clone-a-graph
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/clone-graph/
** TODO Making wired connections :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: making-wired-connections
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/number-of-operations-to-make-network-connected/
** TODO Word ladder :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: word-ladder
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/word-ladder/
** TODO Dijkstra algorithm :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: dijkstra-algorithm
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/
*** Undirected, unweighted graph
** TODO Implement topological sort :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-topological-sort
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/topological-sort/1
Topological sort is only valid for a Directed Acyclic Graph
*** Using DFS
*** Using BFS
** TODO Minimum time taken by each job to be completed given by a directed acyclic graph :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: minimum-time-taken-by-each-job-to-be-completed-given-by-a-directed-acyclic-graph
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/minimum-time-taken-by-each-job-to-be-completed-given-by-a-directed-acyclic-graph/
Simply implement Kahn's algorithm with a =jobs= array adding 1 to each layer of
the topo traversal
** TODO Find whether it is possible to finish all tasks from given dependencies :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: find-whether-it-is-possible-to-finish-all-tasks-from-given-dependencies
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/find-whether-it-is-possible-to-finish-all-tasks-or-not-from-given-dependencies/
** TODO Find the number of islands :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-number-of-islands
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/find-the-number-of-islands/1
** TODO Given a sorted dictionary of an alien language, find order of characters :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: given-a-sorted-dictionary-of-an-alien-language-find-order-of-characters
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/alien-dictionary/1
** TODO Implement Kruskal's algorithm :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-kruksal-s-algorithm
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/kruskals-minimum-spanning-tree-algorithm-greedy-algo-2/
** TODO Implement Prim's algorithm :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-prim-s-algorithm
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/prims-minimum-spanning-tree-mst-greedy-algo-5/
** TODO Total number of spanning tree in a graph :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: total-number-of-spanning-tree-in-a-graph
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/total-number-spanning-trees-graph/
** TODO Implement Bellman Ford algorithm :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-bellman-ford-algorithm
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/negative-weight-cycle/0
** TODO Implement Floyd Warshall algorithm :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-floyd-warshall-algorithm
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/implementing-floyd-warshall/0
** TODO Travelling salesman :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: travelling-salesman
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/travelling-salesman-problem-set-1/
** TODO Graph colouring :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: graph-colouring
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/graph-coloring-applications/
** TODO Snake and ladders :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: snake-and-ladders
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/snakes-and-ladders/
** TODO Find bridge in a graph :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: find-bridge-in-a-graph
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/bridge-in-a-graph/
** TODO Count strongly connected components (Kosaraju algorithm) :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: count-strongly-connected-components--kosaraju-algorithm
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/strongly-connected-components-kosarajus-algo/1
** TODO Check if graph is bipartite :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: check-if-graph-is-bipartite
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/bipartite-graph/
Color the graph by BFS traversal, =colors= maintains track of visited nodes.
=colors[it] = 1 - colors[node]= is the fun alternator part
*** Using BFS
*** Using DFS
** TODO Detect negative cycle in a graph :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: detect-negative-cycle-in-a-graph
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/detect-negative-cycle-graph-bellman-ford/
** TODO Longest path in a directed acyclic graph :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: longest-path-in-a-directed-acyclic-graph
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/find-longest-path-directed-acyclic-graph/
** TODO Journey to the moon :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: journey-to-the-moon
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.hackerrank.com/challenges/journey-to-the-moon/problem
** TODO Cheapest flights within K stops :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: cheapest-flights-within-k-stops
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/cheapest-flights-within-k-stops/description/
** TODO Oliver and the game :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: oliver-and-the-game
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.hackerearth.com/practice/algorithms/graphs/topological-sort/practice-problems/algorithm/oliver-and-the-game-3/
** TODO Water jug using BFS :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: water-jug-using-bfs
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/water-jug-problem-using-bfs/
** TODO Minimum edges to reverse to make path from source to destination :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: minimum-edges-to-reverse-to-make-path-from-source-to-destination
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/minimum-edges-reverse-make-path-source-destination/
** TODO Paths to travel each nodes using each edge :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: paths-to-travel-each-nodes-using-each-edge
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/paths-travel-nodes-using-edgeseven-bridges-konigsberg/
** TODO Vertex cover :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: vertex-cover
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/vertex-cover-problem-set-1-introduction-approximate-algorithm-2/
** TODO Chinese postman or route inspection :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: chinese-postman-or-route-inspection
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/chinese-postman-route-inspection-set-1-introduction/
** TODO Number of triangles in a directed and undirected graph :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: number-of-triangles-in-a-directed-and-undirected-graph
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/number-of-triangles-in-directed-and-undirected-graphs/
** TODO Minimise the cashflow in a set of friends :graph:greedy:
:PROPERTIES:
:EXPORT_FILE_NAME: minimise-the-cashflow-in-a-set-of-friends
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/minimize-cash-flow-among-given-set-friends-borrowed-money/
** TODO Two clique :graph:
:PROPERTIES:
:EXPORT_FILE_NAME: two-clique
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/two-clique-problem-check-graph-can-divided-two-cliques/
** TODO Construct a trie from scratch :trie:
:PROPERTIES:
:EXPORT_FILE_NAME: construct-a-trie-from-scratch
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/trie-insert-and-search/
** TODO Find shortest unique prefix for every word in a given list :trie:
:PROPERTIES:
:EXPORT_FILE_NAME: find-shortest-unique-prefix-for-every-word-in-a-given-list
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/find-all-shortest-unique-prefixes-to-represent-each-word-in-a-given-list/
** TODO Implement a phone directory :trie:
:PROPERTIES:
:EXPORT_FILE_NAME: implement-a-phone-directory
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/phone-directory/0
** TODO Print unique rows in a given boolean matrix :trie:
:PROPERTIES:
:EXPORT_FILE_NAME: print-unique-rows-in-a-given-boolean-matrix
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/unique-rows-in-boolean-matrix/1
** TODO Coin change :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: coin-change
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/coin-change2448/1
** TODO Knapsack :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: knapsack
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/0-1-knapsack-problem/0
Iterative
Recursion
** TODO Binomial coefficient :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: binomial-coefficient
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/ncr1019/1
** TODO Permutation coefficient :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: permutation-coefficient
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/permutation-coefficient/
** TODO Nth catalan number :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: nth-catalan-number
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/program-nth-catalan-number/
** TODO Matrix chain multiplication :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: matrix-chain-multiplication
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/matrix-chain-multiplication-dp-8/
** TODO Subset sum aka Partitions :dp:backtracking:
:PROPERTIES:
:EXPORT_FILE_NAME: subset-sum-aka-partitions
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/subset-sum-problem2014/1
** TODO Friends pairing :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: friends-pairing
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/friends-pairing-problem5425/1
** TODO Gold mine :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: gold-mine
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/gold-mine-problem/
** TODO Assembly line scheduling :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: assembly-line-scheduling
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/assembly-line-scheduling-dp-34/
** TODO Painting the fence :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: painting-the-fence
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/painting-the-fence3727/1
** TODO Maximize the cut segments :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: maximize-the-cut-segments
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/cutted-segments/0
** TODO Longest common subsequence :string:dp:
:PROPERTIES:
:EXPORT_FILE_NAME: longest-common-subsequence
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/longest-common-subsequence/0
Iterative
Recursive
** TODO Longest repeated subsequence :string:dp:
:PROPERTIES:
:EXPORT_FILE_NAME: longest-repeated-subsequence
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/longest-repeating-subsequence/0
** TODO Longest increasing subsequence :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: longest-increasing-subsequence
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/longest-increasing-subsequence/
** TODO Space optimized solution of LCS :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: space-optimized-solution-of-lcs
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/space-optimized-solution-lcs/
** TODO LCS of three strings :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: lcs-of-three-strings
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/lcs-of-three-strings/0
** TODO Maximum sum increasing subsequence :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: maximum-sum-increasing-subsequence
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/maximum-sum-increasing-subsequence4749/1
** TODO Count all subsequences having product less than K :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: count-all-subsequences-having-product-less-than-k
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/count-subsequences-product-less-k/
** TODO Longest subsequence such that difference between adjacent is one :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: longest-subsequence-such-that-difference-between-adjacent-is-one
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/longest-subsequence-such-that-difference-between-adjacents-is-one4724/1
** TODO Maximum subsequence sum such that no three are consecutive :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: maximum-subsequence-sum-such-that-no-three-are-consecutive
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/maximum-subsequence-sum-such-that-no-three-are-consecutive/
** TODO Egg dropping :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: egg-dropping
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/egg-dropping-puzzle/0
** TODO Maximum length chain of pairs :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: maximum-length-chain-of-pairs
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/max-length-chain/1
** TODO Maximum size square sub-matrix with all 1s :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: maximum-size-square-sub-matrix-with-all-1s
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/largest-square-formed-in-a-matrix/0
** TODO Maximum sum of pairs with specific difference :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: maximum-sum-of-pairs-with-specific-difference
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/pairs-with-specific-difference/0
** TODO Min cost path :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: min-cost-path
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/path-in-matrix3805/1
** TODO Maximum difference of zeros and ones in binary string :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: maximum-difference-of-zeros-and-ones-in-binary-string
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/maximum-difference-of-zeros-and-ones-in-binary-string4111/1
** TODO Minimum cost to fill given weight in a bag :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: minimum-cost-to-fill-given-weight-in-a-bag
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/minimum-cost-to-fill-given-weight-in-a-bag1956/1
** TODO Minimum removals from array to make max - min <= K :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: minimum-removals-from-array-to-make-max-min-k
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/minimum-removals-array-make-max-min-k/
** TODO Longest common substring :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: longest-common-substring
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/longest-common-substring/0
** TODO Count number of ways to reach a given score in a game :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: count-number-of-ways-to-reach-a-given-score-in-a-game
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/reach-a-given-score/0
** TODO Count balanced binary trees of height h :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: count-balanced-binary-trees-of-height-h
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/bbt-counter/0
** TODO Smallest sum contiguous subarray :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: smallest-sum-contiguous-subarray
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/smallest-sum-contiguous-subarray/
** TODO Unbounded knapsack :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: unbounded-knapsack
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/knapsack-with-duplicate-items4201/1
** TODO Largest independent set :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: largest-independent-set
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/largest-independent-set-problem-dp-26/
** TODO Longest palindromic subsequence :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: longest-palindromic-subsequence
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/longest-palindromic-subsequence/
** TODO Longest palindromic substring :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: longest-palindromic-substring
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/longest-palindromic-substring/
** TODO Longest alternating subsequence :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: longest-alternating-subsequence
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/longest-alternating-subsequence/0
** TODO Weighted job scheduling :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: weighted-job-scheduling
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/weighted-job-scheduling/
** TODO Coin game winner where every player has three choices :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: coin-game-winner-where-every-player-has-three-choices
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/coin-game-winner-every-player-three-choices/
** TODO [#A] Count derangements :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: count-derangements
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/count-derangements-permutation-such-that-no-element-appears-in-its-original-position/
** TODO Optimal strategy for a game :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: optimal-strategy-for-a-game
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/optimal-strategy-for-a-game/0
** TODO Optimal binary search tree :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: optimal-binary-search-tree
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/optimal-binary-search-tree-dp-24/
** TODO Palindrome partitioning :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: palindrome-partitioning
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/palindromic-patitioning4845/1
** TODO [#A] Mobile numeric keypad :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: mobile-numeric-keypad
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/mobile-numeric-keypad5456/1
** TODO Boolean parenthesization :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: boolean-parenthesization
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/boolean-parenthesization/0
** TODO Largest rectangular sub-matrix whose sum is 0 :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: largest-rectangular-sub-matrix-whose-sum-is-0
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/largest-rectangular-sub-matrix-whose-sum-0/
** TODO [#A] Largest area rectangular sub-matrix with equal number of 1s and 0s :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: largest-area-rectangular-sub-matrix-with-equal-number-of-1s-and-0s
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/largest-area-rectangular-sub-matrix-equal-number-1s-0s/
** TODO Maximum sum rectangle in a 2D matrix :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: maximum-sum-rectangle-in-a-2d-matrix
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/maximum-sum-rectangle/0
** TODO Maximum profit by buying and selling a share at most K times :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: maximum-profit-by-buying-and-selling-a-share-at-most-k-times
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/maximum-profit4657/1
** TODO Find if a string is interleaved of two other strings :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: find-if-a-string-is-interleaved-of-two-other-strings
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/interleaved-strings/1
** TODO Maximum length of pair chain :dp:
:PROPERTIES:
:EXPORT_FILE_NAME: maximum-length-of-pair-chain
:EXPORT_HUGO_WEIGHT: auto
:END:
https://leetcode.com/problems/maximum-length-of-pair-chain/
** TODO Count set bits in an integer :bit:
:PROPERTIES:
:EXPORT_FILE_NAME: count-set-bits-in-an-integer
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/set-bits0143/1
** TODO Find the two non-repeating elements in an array of repeating elements :bit:
:PROPERTIES:
:EXPORT_FILE_NAME: find-the-two-non-repeating-elements-in-an-array-of-repeating-elements
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/finding-the-numbers0215/1
** TODO Count number of bits to be flipped to convert A to B :bit:
:PROPERTIES:
:EXPORT_FILE_NAME: count-number-of-bits-to-be-flipped-to-convert-a-to-b
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/bit-difference/0
** TODO Count total set bits in all numbers from 1 to N :bit:
:PROPERTIES:
:EXPORT_FILE_NAME: count-total-set-bits-in-all-numbers-from-1-to-n
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/count-total-set-bits/0
** TODO Check if a number is a power of 2 :bit:
:PROPERTIES:
:EXPORT_FILE_NAME: check-if-a-number-is-a-power-of-2
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/power-of-2/0
** TODO Find position of the only set bit :bit:
:PROPERTIES:
:EXPORT_FILE_NAME: find-position-of-the-only-set-bit
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/find-position-of-set-bit3706/1
** TODO Copy set bits in a range :bit:
:PROPERTIES:
:EXPORT_FILE_NAME: copy-set-bits-in-a-range
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/copy-set-bits-in-a-range/
** TODO Divide two integers without using multiplication, division or mod operator :bit:
:PROPERTIES:
:EXPORT_FILE_NAME: divide-two-integers-without-using-multiplication-division-or-mod-operator
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/divide-two-integers-without-using-multiplication-division-mod-operator/
** TODO Calculate square of a number without using *, / and pow() :bit:
:PROPERTIES:
:EXPORT_FILE_NAME: calculate-square-of-a-number-without-using-and-pow
:EXPORT_HUGO_WEIGHT: auto
:END:
https://www.geeksforgeeks.org/calculate-square-of-a-number-without-using-and-pow/
** TODO Power set :bit:
:PROPERTIES:
:EXPORT_FILE_NAME: power-set
:EXPORT_HUGO_WEIGHT: auto
:END:
https://practice.geeksforgeeks.org/problems/power-set4302/1
# Local Variables:
# org-hugo-section: "dsa"
# org-export-allow-bind-keywords: t
# End:
